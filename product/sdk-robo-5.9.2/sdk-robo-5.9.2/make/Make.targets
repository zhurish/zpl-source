# $Id: Make.targets,v 1.209.4.3 Broadcom SDK $
# $Copyright: Copyright 2011 Broadcom Corporation.
# This program is the proprietary software of Broadcom Corporation
# and/or its licensors, and may only be used, duplicated, modified
# or distributed pursuant to the terms and conditions of a separate,
# written license agreement executed between you and Broadcom
# (an "Authorized License").  Except as set forth in an Authorized
# License, Broadcom grants no license (express or implied), right
# to use, or waiver of any kind with respect to the Software, and
# Broadcom expressly reserves all rights in and to the Software
# and all intellectual property rights therein.  IF YOU HAVE
# NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
# IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
# ALL USE OF THE SOFTWARE.  
#  
# Except as expressly set forth in the Authorized License,
#  
# 1.     This program, including its structure, sequence and organization,
# constitutes the valuable trade secrets of Broadcom, and you shall use
# all reasonable efforts to protect the confidentiality thereof,
# and to use this information only in connection with your use of
# Broadcom integrated circuit products.
#  
# 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
# PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
# REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
# OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
# DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
# NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
# ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
# CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
# OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
# 
# 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
# BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
# INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
# ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
# TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
# THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
# WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
# ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
#
# Included from Make.config to define build targets, including
# optional ones requested in CFGFLAGS in the platform Makefile.

#
# Driver Libraries
#
#   These are the required libraries to use the driver by itself,
#   without diagnostics or tests, including the SAL core.
#

ifeq ($(LINUX_MAKE_SHARED_LIB),1)
libext = so.$(SHAREDLIBVER)
else
libext = a
endif

BCM_LIB = libbcm.$(libext)
ifneq (,$(findstring -DBCM_RPC_SUPPORT,$(CFGFLAGS)))
BCM_LIB += libbcm_rpc.$(libext)
BCM_LIB += libbcm_compat.$(libext)
endif
ifneq (,$(findstring -DBCM_ESW_SUPPORT,$(CFGFLAGS)))
BCM_LIB += libbcm_esw.$(libext)
endif
ifneq (,$(findstring -DBCM_ROBO_SUPPORT,$(CFGFLAGS)))
BCM_LIB += libbcm_robo.$(libext)
endif
ifneq (,$(findstring -DBCM_SBX_SUPPORT,$(CFGFLAGS)))
BCM_LIB += libbcm_sbx.$(libext)
endif


ifdef BCM_5650_C0
BCM_LIB_STRATA = libstrata.$(libext)
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_TUCANA = libtucana.$(libext)
endif

ifdef BCM_5665_A0
BCM_LIB_STRATA = libstrata.$(libext)
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_TUCANA = libtucana.$(libext)
endif

ifdef BCM_5665_B0
BCM_LIB_STRATA = libstrata.$(libext)
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_TUCANA = libtucana.$(libext)
endif

ifdef BCM_5670_A0
BCM_LIB_HERC = libherc.$(libext)
endif

ifdef BCM_5675_A0
BCM_LIB_HERC = libherc.$(libext)
endif

ifdef BCM_5673_A0
BCM_LIB_STRATA = libstrata.$(libext)
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_LYNX = liblynx.$(libext)
endif

ifdef BCM_5674_A0
BCM_LIB_STRATA = libstrata.$(libext)
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_LYNX = liblynx.$(libext)
endif

ifdef BCM_5690_A0
BCM_LIB_DRACO = libdraco.$(libext)
endif

ifdef BCM_5695_A0
BCM_LIB_DRACO = libdraco.$(libext)
endif

ifdef BCM_56601_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_EASYRIDER = libeasyrider.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56602_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_EASYRIDER = libeasyrider.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56601_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_EASYRIDER = libeasyrider.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56602_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_EASYRIDER = libeasyrider.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56601_C0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_EASYRIDER = libeasyrider.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56602_C0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_EASYRIDER = libeasyrider.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56504_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56504_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56304_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56102_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56314_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56112_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56580_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_HUMV = libhumv.$(libext)
endif

ifdef BCM_56700_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_HUMV = libhumv.$(libext)
BCM_LIB_HERC = libherc.$(libext)
endif

ifdef BCM_56800_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_HUMV = libhumv.$(libext)
endif

ifdef BCM_56218_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_RAPTOR = libraptor.$(libext)
endif

ifdef BCM_56514_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
endif

ifdef BCM_56624_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
endif

ifdef BCM_56680_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
endif

ifdef BCM_56624_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
endif

ifdef BCM_56680_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
endif

ifdef BCM_56224_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_RAPTOR = libraptor.$(libext)
endif

ifdef BCM_56224_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_RAPTOR = libraptor.$(libext)
endif

ifdef BCM_53314_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_RAPTOR = libraptor.$(libext)
endif

ifdef BCM_53324_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_RAPTOR = libraptor.$(libext)
endif

ifdef BCM_56820_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_HUMV = libhumv.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_SCORPION = libscorpion.$(libext)
endif

ifdef BCM_56725_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_HUMV = libhumv.$(libext)
BCM_LIB_HERC = libherc.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_SCORPION = libscorpion.$(libext)
BCM_LIB_CONQUEROR = libconqueror.$(libext)
endif

ifdef BCM_56634_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
endif

ifdef BCM_56634_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
endif

ifdef BCM_56524_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
endif

ifdef BCM_56524_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
endif

ifdef BCM_56685_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
endif

ifdef BCM_56685_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
endif

ifdef BCM_56334_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
BCM_LIB_ENDURO = libenduro.$(libext)
endif

ifdef BCM_56334_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
BCM_LIB_ENDURO = libenduro.$(libext)
endif

ifdef BCM_56142_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
BCM_LIB_ENDURO = libenduro.$(libext)
BCM_LIB_HURRICANE = libhurricane.$(libext)
endif

ifdef BCM_56840_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_HERC = libherc.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_HUMV = libhumv.$(libext)
BCM_LIB_SCORPION = libscorpion.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
BCM_LIB_TRIDENT = libtrident.$(libext)
BCM_LIB_TITAN = libtitan.$(libext)
endif

ifdef BCM_56840_B0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_HERC = libherc.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_HUMV = libhumv.$(libext)
BCM_LIB_SCORPION = libscorpion.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_TRIUMPH2 = libtriumph2.$(libext)
BCM_LIB_TRIDENT = libtrident.$(libext)
BCM_LIB_TITAN = libtitan.$(libext)
endif

ifdef BCM_88732_A0
BCM_LIB_DRACO = libdraco.$(libext)
BCM_LIB_FIREBOLT = libfirebolt.$(libext)
BCM_LIB_BRADLEY = libbradley.$(libext)
BCM_LIB_HERC = libherc.$(libext)
BCM_LIB_HUMV = libhumv.$(libext)
BCM_LIB_TRX     = libtrx.$(libext)
BCM_LIB_TRIUMPH = libtriumph.$(libext)
BCM_LIB_SCORPION = libscorpion.$(libext)
BCM_LIB_CONQUEROR = libconqueror.$(libext)
endif

ifdef BCM_5324_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
endif
ifdef BCM_5324_A1
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
endif
ifdef BCM_5389_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_DINO16 = libsocrobo_bcm5396.$(libext)
BCM_LIB_ROBO_DRV_DINO8 = libsocrobo_bcm5389.$(libext)
endif

ifdef BCM_5396_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_DINO16 = libsocrobo_bcm5396.$(libext)
endif

ifdef BCM_5398_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_DINO16 = libsocrobo_bcm5396.$(libext)
BCM_LIB_ROBO_DRV_GRIPEN = libsocrobo_bcm5398.$(libext)
endif

ifdef BCM_5348_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_SILVEROAK = libsocrobo_bcm5348.$(libext)
endif

ifdef BCM_5397_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_DINO16 = libsocrobo_bcm5396.$(libext)
BCM_LIB_ROBO_DRV_GRIPEN = libsocrobo_bcm5398.$(libext)
endif


ifdef BCM_5347_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_SILVEROAK = libsocrobo_bcm5348.$(libext)
endif

ifdef BCM_5395_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_FALCON = libsocrobo_bcm5395.$(libext)
endif

ifdef BCM_53242_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_HARRIER = libsocrobo_bcm53242.$(libext)
endif

ifdef BCM_53262_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_HARRIER = libsocrobo_bcm53242.$(libext)
endif

ifdef BCM_53115_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_FALCON = libsocrobo_bcm5395.$(libext)
BCM_LIB_ROBO_DRV_VULCAN = libsocrobo_bcm53115.$(libext)
endif

ifdef BCM_53118_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_FALCON = libsocrobo_bcm5395.$(libext)
BCM_LIB_ROBO_DRV_VULCAN = libsocrobo_bcm53115.$(libext)
BCM_LIB_ROBO_DRV_BLACKBIRD = libsocrobo_bcm53118.$(libext)
endif

ifdef BCM_53280_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_THUNDERBOLT = libsocrobo_bcm53280.$(libext)
endif

ifdef BCM_53280_B0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_THUNDERBOLT = libsocrobo_bcm53280.$(libext)
endif

ifdef BCM_53101_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_FALCON = libsocrobo_bcm5395.$(libext)
BCM_LIB_ROBO_DRV_VULCAN = libsocrobo_bcm53115.$(libext)
BCM_LIB_ROBO_DRV_LOTUS = libsocrobo_bcm53101.$(libext)
endif

ifdef BCM_53125_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_FALCON = libsocrobo_bcm5395.$(libext)
BCM_LIB_ROBO_DRV_VULCAN = libsocrobo_bcm53115.$(libext)
BCM_LIB_ROBO_DRV_STARFIGHTER = libsocrobo_bcm53125.$(libext)
endif

ifdef BCM_53128_A0
BCM_LIB_ROBO_DRV = libsocrobo.$(libext)
BCM_LIB_ROBO_DRV_FALCON = libsocrobo_bcm5395.$(libext)
BCM_LIB_ROBO_DRV_VULCAN = libsocrobo_bcm53115.$(libext)
BCM_LIB_ROBO_DRV_BLACKBIRD2 = libsocrobo_bcm53128.$(libext)
endif


ifdef BCM_FE2000_A0
BCM_LIB_FE2000 = libfe2000.$(libext) \
                 libfe2000oam.$(libext)
ifdef BCM_FE2000_P2
BCM_LIB_FE2000 += libfe2000g2p2.$(libext) \
                  libsoc_gu2_sbx.$(libext)
endif
ifdef BCM_FE2000_P3
BCM_LIB_FE2000 += libfe2000g2p3.$(libext)
endif
ifdef BCM_FE2000_G2XX
BCM_LIB_FE2000 += libsoc_g2xx_sbx.$(libext)
endif
BCM_LIB_FE2000 += \
     libsoc_g2p3_sbx.$(libext) \
     libsoc_sbx_fe2k_common.$(libext) \
     libsoc_sbx_fe2k.$(libext) \
     libsoc_sbx_fe2kxt.$(libext)
endif

ifdef BCM_QE2000_A0
BCM_LIB_QE2000 = libqe2000.$(libext)         \
		libsoc_g2eplib_sbx.$(libext) \
		libsoc_sbx_qe2k.$(libext)    \
		libsoc_sbx_qe2kep.$(libext)
endif

ifdef BCM_BME3200_A0
BCM_LIB_BME3200 = libbme3200.$(libext)
endif

ifdef BCM_BME3200_B0
BCM_LIB_BME3200 = libbme3200.$(libext)
endif

ifdef BCM_BM9600_A0
BCM_LIB_BM9600 = libbm9600.$(libext)
endif

ifdef BCM_88230_A0
BCM_LIB_SIRIUS = libsirius.$(libext)
endif

ifdef BCM_88230_B0
BCM_LIB_SIRIUS = libsirius.$(libext)
endif

ifdef BCM_88230_C0
BCM_LIB_SIRIUS = libsirius.$(libext)
endif

ifdef BCM_56931_A0
BCM_LIB_SIRIUS = libsirius.$(libext)
endif

ifdef BCM_56936_A0
BCM_LIB_SIRIUS = libsirius.$(libext)
endif

ifdef BUILD_MACSEC
ifndef MACSEC_BLDDIR
ifdef BLDCONFIG
MACSEC_BLDDIR = ${SDK}/${SDKBUILD}/macsec/${BLDCONFIG}
else
MACSEC_BLDDIR = $(MACSEC_HOME)/$(SDKBUILD)
endif
endif

BCM_LIB_MACSEC = ${MACSEC_BLDDIR}/${targetbase}/${targetplat}/${platform}/libcli.$(libext) \
                 ${MACSEC_BLDDIR}/${targetbase}/${targetplat}/${platform}/libbmacsec.$(libext) \
                 ${MACSEC_BLDDIR}/${targetbase}/${targetplat}/${platform}/libphy545xx.$(libext) \
                 ${MACSEC_BLDDIR}/${targetbase}/${targetplat}/${platform}/libphy8729.$(libext) \
                 ${MACSEC_BLDDIR}/${targetbase}/${targetplat}/${platform}/libutil.$(libext)    

endif

ifdef ROBO_CHIPS
ROBO_DRV_LIBS = \
    libsoccommon.$(libext) ${BCM_LIB_ROBO_DRV} libsocrobo_mcm.$(libext) \
    ${BCM_LIB_ROBO_DRV} ${BCM_LIB_ROBO_DRV_DINO16} \
    ${BCM_LIB_ROBO_DRV_DINO8} ${BCM_LIB_ROBO_DRV_GRIPEN} \
    ${BCM_LIB_ROBO_DRV_SILVEROAK} ${BCM_LIB_ROBO_DRV_FALCON} \
    ${BCM_LIB_ROBO_DRV_HARRIER} ${BCM_LIB_ROBO_DRV_VULCAN} \
    ${BCM_LIB_ROBO_DRV_BLACKBIRD} ${BCM_LIB_ROBO_DRV_THUNDERBOLT} \
    ${BCM_LIB_ROBO_DRV_LOTUS} ${BCM_LIB_ROBO_DRV_STARFIGHTER} \
    ${BCM_LIB_ROBO_DRV_BLACKBIRD2} \
    libsoc_phy.$(libext) libsoccommon.$(libext)

endif

ifdef ESW_CHIPS
ESW_DRV_LIBS = \
    ${BCM_LIB_EASYRIDER} ${BCM_LIB_FIREBOLT} ${BCM_LIB_RAPTOR} \
    ${BCM_LIB_TITAN} ${BCM_LIB_TRIDENT} \
    ${BCM_LIB_HUMV} ${BCM_LIB_BRADLEY} \
    ${BCM_LIB_TUCANA} ${BCM_LIB_HERC} ${BCM_LIB_LYNX} \
    ${BCM_LIB_DRACO} ${BCM_LIB_RAVEN} ${BCM_LIB_STRATA} \
    ${BCM_LIB_SCORPION} ${BCM_LIB_CONQUEROR} ${BCM_LIB_TRIUMPH} \
    ${BCM_LIB_TRX} ${BCM_LIB_TRIUMPH2} ${BCM_LIB_ENDURO} \
    ${BCM_LIB_HURRICANE} \
    libbcm_esw.$(libext) \
    libsoc_esw.$(libext) libsoc.$(libext) \
    libsoc_phy.$(libext) libsoc_mcm.$(libext)

endif

ifdef SBX_CHIPS
SBX_DRV_LIBS = \
	libsoc_sbx.$(libext) \
	libsbxcommon.$(libext) \
	$(BCM_LIB_FE2000) \
	$(BCM_LIB_QE2000) \
	$(BCM_LIB_BME3200) \
	$(BCM_LIB_BM9600) \
	$(BCM_LIB_SIRIUS) \
	libbcm_common.a \
	libsoc.$(libext) \
	libsoc_phy.$(libext) \
	libsbxcommon.$(libext) \
	libsoc_sbx.$(libext) \
	lib_sbx_fabric.$(libext)

ifdef BCM_88230_A0
SBX_DRV_LIBS += \
	libsoc_mcm.$(libext)
else
ifdef BCM_88230_B0
SBX_DRV_LIBS += \
	libsoc_mcm.$(libext)
else
ifdef BCM_88230_C0
SBX_DRV_LIBS += \
	libsoc_mcm.$(libext)
endif
endif
endif

endif

DRV_LIBS = \
	${COND_LIB_BCMX} ${COND_LIB_BOARD} ${BCM_LIB} \
	libsoccommon.$(libext)\
	${ESW_DRV_LIBS} ${ROBO_DRV_LIBS} ${SBX_DRV_LIBS} \
	libbcm_common.$(libext) \
	libsoccommon.$(libext)\
	libshared.$(libext) \
	${COND_LIB_SOC_I2C} libsal_core.a libsal_core_plat.$(libext) \
	${COND_LIB_CUSTOMER}  ${COND_LIB_EXAMPLES}


DRV_LIBS_BLD=$(addprefix ${LIBDIR}/,${DRV_LIBS})

EXTERNAL_LIBS = ${BCM_LIB_MACSEC}

DRV_LIBS_BLD += ${EXTERNAL_LIBS}

#
# Diagnostic Libraries
#
#   These are the rest of the diagnostics including the shell and
#   all the tests, Tcl, BDE, and Appl SAL.  Currently only used for Unix.
#

ifdef ESW_CHIPS
ESW_DIAG_LIBS = \
        libplibde.$(libext) \
        libdiag_esw.$(libext)
endif

ifdef ROBO_CHIPS
ROBO_DIAG_LIBS += \
	libdiagrobo.$(libext)
endif

ifdef SBX_CHIPS
SBX_DIAG_LIBS = \
	libdiag_sbx.$(libext)
endif

ifndef NO_SAL_APPL
COND_LIB_SAL_APPL=libsal_appl.$(libext)
COND_LIB_SAL_APPL_PLATFORM=libsal_appl_plat.$(libext)
endif

DIAG_LIBS = \
	${COND_LIB_EDITLINE} \
	libdiag.$(libext) \
	${ROBO_DIAG_LIBS} \
	${ESW_DIAG_LIBS} \
	${SBX_DIAG_LIBS} \
	${COND_LIB_BCMX_DIAG} \
	${COND_LIB_TEST} \
	${COND_LIB_TCL} ${COND_LIB_EAV_APPL} \
        $(COND_LIB_SAL_APPL) \
        $(COND_LIB_SAL_APPL_PLATFORM) \
	libplibde.$(libext)

DIAG_LIBS_BLD=$(addprefix ${LIBDIR}/,${DIAG_LIBS})

#
# Conditional Libraries
#
#   These libraries are based on which build flags are selected
#   in Makefile.<target> or Make.local if personalized.
#

ifneq (,$(findstring -DINCLUDE_I2C,$(CFGFLAGS)))
ifneq (,$(findstring -DBCM_ESW_SUPPORT,$(CFGFLAGS)))
COND_LIB_SOC_I2C += libsoc_i2c.$(libext)
else
ifneq (,$(findstring -DBCM_SBX_SUPPORT,$(CFGFLAGS)))
COND_LIB_SOC_I2C += libsoc_i2c.$(libext)
endif
endif
COND_LIB_SOC_I2C_BLD=${LIBDIR}/${COND_LIB_SOC_I2C}
endif

ifneq (,$(findstring -DINCLUDE_DRIVERS,$(CFGFLAGS)))
COND_LIB_DRIVERS=libdrivers.$(libext)
COND_LIB_DRIVERS_BLD=${LIBDIR}/${COND_LIB_DRIVERS}
endif

ifneq (,$(findstring -DINCLUDE_BCMX,$(CFGFLAGS)))
COND_LIB_BCMX=libbcmx.$(libext)
COND_LIB_BCMX_BLD=$(addprefix ${LIBDIR}/,${COND_LIB_BCMX})
endif

ifneq (,$(findstring -DINCLUDE_BCMX_DIAG,$(CFGFLAGS)))
COND_LIB_BCMX_DIAG=libdiag_bcmx.$(libext)
COND_LIB_BCMX_DIAG_BLD=$(addprefix ${LIBDIR}/,${COND_LIB_BCMX_DIAG})
endif

ifneq (,$(findstring -DINCLUDE_CUSTOMER,$(CFGFLAGS)))
COND_LIB_CUSTOMER=libcustomer.$(libext)
endif

ifneq (,$(findstring -DINCLUDE_EXAMPLES,$(CFGFLAGS)))
COND_LIB_EXAMPLES=libexamples.$(libext)
endif

ifneq (,$(findstring -DINCLUDE_TCL,$(CFGFLAGS)))
COND_LIB_TCL=libtcl_unix.$(libext) libtcl_generic.$(libext) libtcl_broadcom.$(libext) \
    libtcl_unix.$(libext) libtcl_generic.$(libext) libtcl_mpexpr.$(libext)
COND_LIB_TCL_BLD=$(addprefix ${LIBDIR}/,${COND_LIB_TCL})
COND_INC_TCL=-I${SDK}/src/appl/tcl8.3.3
endif

ifneq (,$(findstring -DINCLUDE_EAV_APPL,$(CFGFLAGS)))
COND_LIB_EAV_APPL=libdiageav.$(libext)
COND_LIB_EAV_APPL_BLD=${LIBDIR}/${COND_LIB_EAV_APPL}
endif

ifneq (,$(findstring -DINCLUDE_EDITLINE,$(CFGFLAGS)))
COND_LIB_EDITLINE=libsal_appl_editline.$(libext)
COND_LIB_EDITLINE_BLD=${LIBDIR}/${COND_LIB_EDITLINE}
endif

ifneq (,$(findstring -DINCLUDE_OOB_RCPU,$(CFGFLAGS)))
COND_LIB_ETH_DRV=libeth.$(libext)
COND_LIB_ETH_DRV_BLD=${LIBDIR}/libeth.$(libext)
endif

ifneq (,$(findstring -DINCLUDE_BCM570X,$(CFGFLAGS)))
COND_LIB_BCM570X=libbcm570x.$(libext)
COND_LIB_BCM570X_BLD=${BLDDIR}/libbcm570x.$(libext)
COND_INC_BCM570X=-I${SDK}/systems/drv/bcm570x
endif

ifneq (,$(findstring -DINCLUDE_TEST,$(CFGFLAGS)))
COND_LIB_TEST=libtest.$(libext)
COND_LIB_TEST_BLD=${LIBDIR}/${COND_LIB_TEST}
endif

# Board support

ifneq (,$(findstring -DINCLUDE_BOARD,$(CFGFLAGS)))
COND_LIB_BOARD=libboard_mgr.$(libext)
COND_LIB_BOARD+=libboard_dvr.$(libext)
COND_LIB_BOARD+=libboard_stk.$(libext)
COND_LIB_BOARD+=libboard_spt.$(libext)
endif

#
# Telekinesis suite applications for CPU to CPU communication and discovery
#     CPUDB:         Simple CPU data base manager
#     CPUTRANS:      CPU to CPU communication mechanisms
#     DISCOVER:      Simple discovery; will also include CPUTRANS
#     STKTASK:       Stack manager application
#

# CPU data base manager
ifneq (,$(findstring -DINCLUDE_LIB_CPUDB,$(CFGFLAGS)))
COND_LIB_CPUDB = libcpudb.$(libext)
COND_LIB_CPUDB_BLD=${LIBDIR}/${COND_LIB_CPUDB}
endif

# CPU transport protocols
ifneq (,$(findstring -DINCLUDE_LIB_CPUTRANS,$(CFGFLAGS)))
COND_LIB_CPUTRANS = libcputrans.$(libext)
COND_LIB_CPUTRANS_BLD=${LIBDIR}/${COND_LIB_CPUTRANS}
endif

# Discovery algorithm; requires transport protocols.
ifneq (,$(findstring -DINCLUDE_LIB_DISCOVER,$(CFGFLAGS)))
COND_LIB_DISCOVER = libdiscover.$(libext)
COND_LIB_DISCOVER_BLD=${LIBDIR}/${COND_LIB_DISCOVER}
COND_LIB_CPUTRANS = libcputrans.$(libext)
COND_LIB_CPUTRANS_BLD=${LIBDIR}/${COND_LIB_CPUTRANS}
endif

# Stack task manager
ifneq (,$(findstring -DINCLUDE_LIB_STKTASK,$(CFGFLAGS)))
COND_LIB_STKTASK = libstktask.$(libext)
COND_LIB_STKTASK_BLD=${LIBDIR}/${COND_LIB_STKTASK}
endif

# AEDEV 
ifneq (,$(findstring -DINCLUDE_LIB_AEDEV,$(CFGFLAGS)))
COND_LIB_AEDEV = libaedev.$(libext) 
COND_LIB_AEDEV_BLD = ${LIBDIR}/${COND_LIB_AEDEV}
endif


# CINT interpreter
ifneq (,$(findstring -DINCLUDE_LIB_CINT,$(CFGFLAGS)))
COND_LIB_CINT = libcint.$(libext) 
COND_LIB_CINT_DIAG = libdiagcint.$(libext) 
COND_LIB_CINT_BLD = ${LIBDIR}/${COND_LIB_CINT}
COND_LIB_CINT_DIAG_BLD = ${LIBDIR}/${COND_LIB_CINT_DIAG}
endif


# Access control
ifneq (,$(findstring -DINCLUDE_ACL,$(CFGFLAGS)))
COND_LIB_ACL=libacl.$(libext)
COND_LIB_ACL_BLD=${LIBDIR}/${COND_LIB_ACL}
endif

APPL_LIBS = ${COND_LIB_DISCOVER} ${COND_LIB_STKTASK} ${COND_LIB_ACL} ${COND_LIB_CINT_DIAG} ${COND_LIB_CINT} ${COND_LIB_AEDEV}
APPL_LIBS_BLD = ${COND_LIB_DISCOVER_BLD} ${COND_LIB_STKTASK_BLD} ${COND_LIB_ACL_BLD} ${COND_LIB_CINT_DIAG_BLD} ${COND_LIB_CINT_BLD} ${COND_LIB_AEDEV_BLD}

# The CPU transport lives below the BCM RPC layer
BCM_LIB += ${COND_LIB_CPUTRANS} ${COND_LIB_CPUDB}


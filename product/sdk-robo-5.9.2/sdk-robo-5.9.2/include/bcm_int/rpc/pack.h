/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: pack.h,v 1.190.4.4 Broadcom SDK $
 * $Copyright: Copyright 2011 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:	pack.h
 * Purpose:	BCM API Type Packers
 * Generator:	mkdispatch 1.40
 * Generated:	Wed Nov 17 00:47:05 2010
 */

#ifndef	_BCM_INT_RPC_PACK_H
#define	_BCM_INT_RPC_PACK_H

#include <bcm/types.h>
#include <bcm/auth.h>
#include <bcm/cosq.h>
#include <bcm/custom.h>
#include <bcm/diffserv.h>
#include <bcm/eav.h>
#include <bcm/error.h>
#include <bcm/fabric.h>
#include <bcm/field.h>
#include <bcm/filter.h>
#include <bcm/init.h>
#include <bcm/ipfix.h>
#include <bcm/ipmc.h>
#include <bcm/knet.h>
#include <bcm/l2.h>
#include <bcm/l3.h>
#include <bcm/link.h>
#include <bcm/macsec.h>
#include <bcm/mcast.h>
#include <bcm/mim.h>
#include <bcm/mirror.h>
#include <bcm/mpls.h>
#include <bcm/multicast.h>
#include <bcm/niv.h>
#include <bcm/oam.h>
#include <bcm/pkt.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/proxy.h>
#include <bcm/qos.h>
#include <bcm/rate.h>
#include <bcm/rx.h>
#include <bcm/stack.h>
#include <bcm/stat.h>
#include <bcm/stg.h>
#include <bcm/subport.h>
#include <bcm/switch.h>
#include <bcm/time.h>
#include <bcm/topo.h>
#include <bcm/trill.h>
#include <bcm/trunk.h>
#include <bcm/tunnel.h>
#include <bcm/tx.h>
#include <bcm/vlan.h>
#include <bcm/wlan.h>

#ifdef	BCM_RPC_SUPPORT

/* basic type pack and unpack macros */

#define	BCM_PACKLEN_U8		1
#define	BCM_PACKLEN_U16		2
#define	BCM_PACKLEN_U32		4

#define	BCM_PACK_U8(_buf, _var) \
		*_buf++ = (_var)
#define	BCM_UNPACK_U8(_buf, _var) \
		_var = *_buf++

#define	BCM_PACK_U16(_buf, _var) \
		*_buf++ = ((_var) >> 8) & 0xff; \
		*_buf++ = (_var) & 0xff;
#define	BCM_UNPACK_U16(_buf, _var) \
		_var  = *_buf++ << 8; \
		_var |= *_buf++; 

#define	BCM_PACK_U32(_buf, _var) \
		*_buf++ = ((_var) >> 24) & 0xff; \
		*_buf++ = ((_var) >> 16) & 0xff; \
		*_buf++ = ((_var) >> 8) & 0xff; \
		*_buf++ = (_var) & 0xff;
#define	BCM_UNPACK_U32(_buf, _var) \
		_var  = *_buf++ << 24; \
		_var |= *_buf++ << 16; \
		_var |= *_buf++ << 8; \
		_var |= *_buf++; 

/* declare typedef pack and unpack routines */

#define	BCM_PACKLEN_COSQ_GPORT_DISCARD		24
#define	BCM_PACKLEN_COSQ_GPORT_STAT_PROFILE		8
#define	BCM_PACKLEN_COSQ_SUBSCRIBER_MAP		18
#define	BCM_PACKLEN_DS_CLFR		64
#define	BCM_PACKLEN_DS_COUNTERS		16
#define	BCM_PACKLEN_DS_INPROFILE_ACTN		24
#define	BCM_PACKLEN_DS_NOMATCH_ACTN		24
#define	BCM_PACKLEN_DS_OUTPROFILE_ACTN		16
#define	BCM_PACKLEN_DS_SCHEDULER		36
#define	BCM_PACKLEN_FABRIC_ACTION_INFO		120
#define	BCM_PACKLEN_FABRIC_PREDICATE_ACTION_INFO		20
#define	BCM_PACKLEN_FABRIC_PREDICATE_INFO		28
#define	BCM_PACKLEN_FIELD_DATA_ETHERTYPE		10
#define	BCM_PACKLEN_FIELD_DATA_IP_PROTOCOL		11
#define	BCM_PACKLEN_FIELD_DATA_PACKET_FORMAT		18
#define	BCM_PACKLEN_FIELD_DATA_QUALIFIER		18
#define	BCM_PACKLEN_FIELD_GROUP_STATUS		44
#define	BCM_PACKLEN_FIELD_QSET		44
#define	BCM_PACKLEN_FIELD_SNAP_HEADER		6
#define	BCM_PACKLEN_FIELD_STATUS		12
#define	BCM_PACKLEN_FIELD_UDF_SPEC		1536
#define	BCM_PACKLEN_INFO		16
#define	BCM_PACKLEN_IP6		16
#define	BCM_PACKLEN_IPFIX_CONFIG		168
#define	BCM_PACKLEN_IPFIX_MIRROR_CONFIG		10
#define	BCM_PACKLEN_IPFIX_RATE		33
#ifdef	INCLUDE_L3
#define	BCM_PACKLEN_IPMC_ADDR		133
#define	BCM_PACKLEN_IPMC_COUNTERS		48
#endif	/* INCLUDE_L3 */
#define	BCM_PACKLEN_L2_ADDR		69
#define	BCM_PACKLEN_L2_CACHE_ADDR		74
#define	BCM_PACKLEN_L2_EGRESS		30
#define	BCM_PACKLEN_L2_LEARN_LIMIT		18
#ifdef	INCLUDE_L3
#define	BCM_PACKLEN_L3_EGRESS		59
#define	BCM_PACKLEN_L3_HOST		62
#define	BCM_PACKLEN_L3_INFO		88
#define	BCM_PACKLEN_L3_INGRESS		22
#define	BCM_PACKLEN_L3_INTF		80
#define	BCM_PACKLEN_L3_IP		62
#define	BCM_PACKLEN_L3_KEY		50
#define	BCM_PACKLEN_L3_ROUTE		92
#define	BCM_PACKLEN_L3_SOURCE_BIND		38
#endif	/* INCLUDE_L3 */
#define	BCM_PACKLEN_MAC		6
#define	BCM_PACKLEN_MCAST_ADDR		58
#ifdef	INCLUDE_L3
#define	BCM_PACKLEN_MIM_PORT		76
#define	BCM_PACKLEN_MIM_VPN_CONFIG		24
#endif	/* INCLUDE_L3 */
#define	BCM_PACKLEN_MIRROR_DESTINATION		95
#ifdef	INCLUDE_L3
#define	BCM_PACKLEN_MPLS_CIRCUIT		34
#endif	/* INCLUDE_L3 */
#define	BCM_PACKLEN_MPLS_EGRESS_LABEL		16
#ifdef	INCLUDE_L3
#define	BCM_PACKLEN_MPLS_EXP_MAP		11
#define	BCM_PACKLEN_MPLS_INFO		24
#define	BCM_PACKLEN_MPLS_L3_INITIATOR		38
#define	BCM_PACKLEN_MPLS_PORT		82
#define	BCM_PACKLEN_MPLS_SWITCH		88
#define	BCM_PACKLEN_MPLS_TUNNEL_SWITCH		62
#define	BCM_PACKLEN_MPLS_VPN_CONFIG		22
#define	BCM_PACKLEN_MPLS_VPN		24
#define	BCM_PACKLEN_NIV_FORWARD		16
#define	BCM_PACKLEN_NIV_PORT		14
#endif	/* INCLUDE_L3 */
#define	BCM_PACKLEN_OAM_DELAY		29
#define	BCM_PACKLEN_OAM_ENDPOINT_INFO		167
#define	BCM_PACKLEN_OAM_GROUP_INFO		72
#define	BCM_PACKLEN_OAM_LOSS		45
#define	BCM_PACKLEN_OAM_PSC		39
#define	BCM_PACKLEN_PBMP		17
#define	BCM_PACKLEN_PHY_CONFIG		68
#define	BCM_PACKLEN_POLICER_CONFIG		28
#define	BCM_PACKLEN_PORT_ABILITY		36
#define	BCM_PACKLEN_PORT_CABLE_DIAG		44
#define	BCM_PACKLEN_PORT_CONFIG		238
#define	BCM_PACKLEN_PORT_CONGESTION_CONFIG		43
#define	BCM_PACKLEN_PORT_ENCAP_CONFIG		37
#define	BCM_PACKLEN_PORT_INFO		260
#define	BCM_PACKLEN_PORT_MATCH_INFO		26
#define	BCM_PACKLEN_PORT_TIMESYNC_CONFIG		65
#define	BCM_PACKLEN_PRIORITY_MAPPING		20
#define	BCM_PACKLEN_QOS_MAP		30
#define	BCM_PACKLEN_RATE_LIMIT		16
#define	BCM_PACKLEN_RX_REASONS		16
#define	BCM_PACKLEN_SUBPORT_CONFIG		14
#define	BCM_PACKLEN_SUBPORT_GROUP_CONFIG		18
#define	BCM_PACKLEN_TIME_CAPTURE		69
#define	BCM_PACKLEN_TIME_INTERFACE		51
#ifdef	INCLUDE_L3
#define	BCM_PACKLEN_TRILL_PORT		40
#endif	/* INCLUDE_L3 */
#define	BCM_PACKLEN_TRUNK_ADD_INFO		228
#define	BCM_PACKLEN_TRUNK_CHIP_INFO		28
#define	BCM_PACKLEN_TRUNK_MEMBER		8
#ifdef	INCLUDE_L3
#define	BCM_PACKLEN_TUNNEL_CONFIG		20
#define	BCM_PACKLEN_TUNNEL_DSCP_MAP		12
#define	BCM_PACKLEN_TUNNEL_INITIATOR		100
#define	BCM_PACKLEN_TUNNEL_TERMINATOR		131
#endif	/* INCLUDE_L3 */
#define	BCM_PACKLEN_VLAN_ACTION_SET		68
#define	BCM_PACKLEN_VLAN_BLOCK		68
#define	BCM_PACKLEN_VLAN_CONTROL_VLAN		68
#define	BCM_PACKLEN_VLAN_IP		38
#define	BCM_PACKLEN_VLAN_PORT		46
#define	BCM_PACKLEN_VLAN_VECTOR		512
#ifdef	INCLUDE_L3
#define	BCM_PACKLEN_WLAN_CLIENT		22
#define	BCM_PACKLEN_WLAN_PORT		40
#endif	/* INCLUDE_L3 */
#define	BCM_PACKLEN_INT_aBCM_COS_COUNT		32
#define	BCM_PACKLEN_INT_aBCM_TRUNK_MAX_PORTCNT		64
#define	BCM_PACKLEN_UINT32_aBCM_CUSTOM_ARGS_MAX		1024
#define	BCM_PACKLEN_UINT64		8

extern uint8 *_bcm_pack_cosq_gport_discard(uint8 *, bcm_cosq_gport_discard_t *);
extern uint8 *_bcm_unpack_cosq_gport_discard(uint8 *, bcm_cosq_gport_discard_t *);
extern uint8 *_bcm_pack_cosq_gport_stat_profile(uint8 *, bcm_cosq_gport_stat_profile_t *);
extern uint8 *_bcm_unpack_cosq_gport_stat_profile(uint8 *, bcm_cosq_gport_stat_profile_t *);
extern uint8 *_bcm_pack_cosq_subscriber_map(uint8 *, bcm_cosq_subscriber_map_t *);
extern uint8 *_bcm_unpack_cosq_subscriber_map(uint8 *, bcm_cosq_subscriber_map_t *);
extern uint8 *_bcm_pack_ds_clfr(uint8 *, bcm_ds_clfr_t *);
extern uint8 *_bcm_unpack_ds_clfr(uint8 *, bcm_ds_clfr_t *);
extern uint8 *_bcm_pack_ds_counters(uint8 *, bcm_ds_counters_t *);
extern uint8 *_bcm_unpack_ds_counters(uint8 *, bcm_ds_counters_t *);
extern uint8 *_bcm_pack_ds_inprofile_actn(uint8 *, bcm_ds_inprofile_actn_t *);
extern uint8 *_bcm_unpack_ds_inprofile_actn(uint8 *, bcm_ds_inprofile_actn_t *);
extern uint8 *_bcm_pack_ds_nomatch_actn(uint8 *, bcm_ds_nomatch_actn_t *);
extern uint8 *_bcm_unpack_ds_nomatch_actn(uint8 *, bcm_ds_nomatch_actn_t *);
extern uint8 *_bcm_pack_ds_outprofile_actn(uint8 *, bcm_ds_outprofile_actn_t *);
extern uint8 *_bcm_unpack_ds_outprofile_actn(uint8 *, bcm_ds_outprofile_actn_t *);
extern uint8 *_bcm_pack_ds_scheduler(uint8 *, bcm_ds_scheduler_t *);
extern uint8 *_bcm_unpack_ds_scheduler(uint8 *, bcm_ds_scheduler_t *);
extern uint8 *_bcm_pack_fabric_action_info(uint8 *, bcm_fabric_action_info_t *);
extern uint8 *_bcm_unpack_fabric_action_info(uint8 *, bcm_fabric_action_info_t *);
extern uint8 *_bcm_pack_fabric_predicate_action_info(uint8 *, bcm_fabric_predicate_action_info_t *);
extern uint8 *_bcm_unpack_fabric_predicate_action_info(uint8 *, bcm_fabric_predicate_action_info_t *);
extern uint8 *_bcm_pack_fabric_predicate_info(uint8 *, bcm_fabric_predicate_info_t *);
extern uint8 *_bcm_unpack_fabric_predicate_info(uint8 *, bcm_fabric_predicate_info_t *);
extern uint8 *_bcm_pack_field_data_ethertype(uint8 *, bcm_field_data_ethertype_t *);
extern uint8 *_bcm_unpack_field_data_ethertype(uint8 *, bcm_field_data_ethertype_t *);
extern uint8 *_bcm_pack_field_data_ip_protocol(uint8 *, bcm_field_data_ip_protocol_t *);
extern uint8 *_bcm_unpack_field_data_ip_protocol(uint8 *, bcm_field_data_ip_protocol_t *);
extern uint8 *_bcm_pack_field_data_packet_format(uint8 *, bcm_field_data_packet_format_t *);
extern uint8 *_bcm_unpack_field_data_packet_format(uint8 *, bcm_field_data_packet_format_t *);
extern uint8 *_bcm_pack_field_data_qualifier(uint8 *, bcm_field_data_qualifier_t *);
extern uint8 *_bcm_unpack_field_data_qualifier(uint8 *, bcm_field_data_qualifier_t *);
extern uint8 *_bcm_pack_field_group_status(uint8 *, bcm_field_group_status_t *);
extern uint8 *_bcm_unpack_field_group_status(uint8 *, bcm_field_group_status_t *);
extern uint8 *_bcm_pack_field_qset(uint8 *, bcm_field_qset_t *);
extern uint8 *_bcm_unpack_field_qset(uint8 *, bcm_field_qset_t *);
extern uint8 *_bcm_pack_field_snap_header(uint8 *, bcm_field_snap_header_t *);
extern uint8 *_bcm_unpack_field_snap_header(uint8 *, bcm_field_snap_header_t *);
extern uint8 *_bcm_pack_field_status(uint8 *, bcm_field_status_t *);
extern uint8 *_bcm_unpack_field_status(uint8 *, bcm_field_status_t *);
extern uint8 *_bcm_pack_field_udf_spec(uint8 *, bcm_field_udf_spec_t *);
extern uint8 *_bcm_unpack_field_udf_spec(uint8 *, bcm_field_udf_spec_t *);
extern uint8 *_bcm_pack_info(uint8 *, bcm_info_t *);
extern uint8 *_bcm_unpack_info(uint8 *, bcm_info_t *);
extern uint8 *_bcm_pack_ip6(uint8 *, bcm_ip6_t);
extern uint8 *_bcm_unpack_ip6(uint8 *, bcm_ip6_t);
extern uint8 *_bcm_pack_ipfix_config(uint8 *, bcm_ipfix_config_t *);
extern uint8 *_bcm_unpack_ipfix_config(uint8 *, bcm_ipfix_config_t *);
extern uint8 *_bcm_pack_ipfix_mirror_config(uint8 *, bcm_ipfix_mirror_config_t *);
extern uint8 *_bcm_unpack_ipfix_mirror_config(uint8 *, bcm_ipfix_mirror_config_t *);
extern uint8 *_bcm_pack_ipfix_rate(uint8 *, bcm_ipfix_rate_t *);
extern uint8 *_bcm_unpack_ipfix_rate(uint8 *, bcm_ipfix_rate_t *);
#ifdef	INCLUDE_L3
extern uint8 *_bcm_pack_ipmc_addr(uint8 *, bcm_ipmc_addr_t *);
extern uint8 *_bcm_unpack_ipmc_addr(uint8 *, bcm_ipmc_addr_t *);
extern uint8 *_bcm_pack_ipmc_counters(uint8 *, bcm_ipmc_counters_t *);
extern uint8 *_bcm_unpack_ipmc_counters(uint8 *, bcm_ipmc_counters_t *);
#endif	/* INCLUDE_L3 */
extern uint8 *_bcm_pack_l2_addr(uint8 *, bcm_l2_addr_t *);
extern uint8 *_bcm_unpack_l2_addr(uint8 *, bcm_l2_addr_t *);
extern uint8 *_bcm_pack_l2_cache_addr(uint8 *, bcm_l2_cache_addr_t *);
extern uint8 *_bcm_unpack_l2_cache_addr(uint8 *, bcm_l2_cache_addr_t *);
extern uint8 *_bcm_pack_l2_egress(uint8 *, bcm_l2_egress_t *);
extern uint8 *_bcm_unpack_l2_egress(uint8 *, bcm_l2_egress_t *);
extern uint8 *_bcm_pack_l2_learn_limit(uint8 *, bcm_l2_learn_limit_t *);
extern uint8 *_bcm_unpack_l2_learn_limit(uint8 *, bcm_l2_learn_limit_t *);
#ifdef	INCLUDE_L3
extern uint8 *_bcm_pack_l3_egress(uint8 *, bcm_l3_egress_t *);
extern uint8 *_bcm_unpack_l3_egress(uint8 *, bcm_l3_egress_t *);
extern uint8 *_bcm_pack_l3_host(uint8 *, bcm_l3_host_t *);
extern uint8 *_bcm_unpack_l3_host(uint8 *, bcm_l3_host_t *);
extern uint8 *_bcm_pack_l3_info(uint8 *, bcm_l3_info_t *);
extern uint8 *_bcm_unpack_l3_info(uint8 *, bcm_l3_info_t *);
extern uint8 *_bcm_pack_l3_ingress(uint8 *, bcm_l3_ingress_t *);
extern uint8 *_bcm_unpack_l3_ingress(uint8 *, bcm_l3_ingress_t *);
extern uint8 *_bcm_pack_l3_intf(uint8 *, bcm_l3_intf_t *);
extern uint8 *_bcm_unpack_l3_intf(uint8 *, bcm_l3_intf_t *);
extern uint8 *_bcm_pack_l3_ip(uint8 *, bcm_l3_ip_t *);
extern uint8 *_bcm_unpack_l3_ip(uint8 *, bcm_l3_ip_t *);
extern uint8 *_bcm_pack_l3_key(uint8 *, bcm_l3_key_t *);
extern uint8 *_bcm_unpack_l3_key(uint8 *, bcm_l3_key_t *);
extern uint8 *_bcm_pack_l3_route(uint8 *, bcm_l3_route_t *);
extern uint8 *_bcm_unpack_l3_route(uint8 *, bcm_l3_route_t *);
extern uint8 *_bcm_pack_l3_source_bind(uint8 *, bcm_l3_source_bind_t *);
extern uint8 *_bcm_unpack_l3_source_bind(uint8 *, bcm_l3_source_bind_t *);
#endif	/* INCLUDE_L3 */
extern uint8 *_bcm_pack_mac(uint8 *, bcm_mac_t);
extern uint8 *_bcm_unpack_mac(uint8 *, bcm_mac_t);
extern uint8 *_bcm_pack_mcast_addr(uint8 *, bcm_mcast_addr_t *);
extern uint8 *_bcm_unpack_mcast_addr(uint8 *, bcm_mcast_addr_t *);
#ifdef	INCLUDE_L3
extern uint8 *_bcm_pack_mim_port(uint8 *, bcm_mim_port_t *);
extern uint8 *_bcm_unpack_mim_port(uint8 *, bcm_mim_port_t *);
extern uint8 *_bcm_pack_mim_vpn_config(uint8 *, bcm_mim_vpn_config_t *);
extern uint8 *_bcm_unpack_mim_vpn_config(uint8 *, bcm_mim_vpn_config_t *);
#endif	/* INCLUDE_L3 */
extern uint8 *_bcm_pack_mirror_destination(uint8 *, bcm_mirror_destination_t *);
extern uint8 *_bcm_unpack_mirror_destination(uint8 *, bcm_mirror_destination_t *);
#ifdef	INCLUDE_L3
extern uint8 *_bcm_pack_mpls_circuit(uint8 *, bcm_mpls_circuit_t *);
extern uint8 *_bcm_unpack_mpls_circuit(uint8 *, bcm_mpls_circuit_t *);
#endif	/* INCLUDE_L3 */
extern uint8 *_bcm_pack_mpls_egress_label(uint8 *, bcm_mpls_egress_label_t *);
extern uint8 *_bcm_unpack_mpls_egress_label(uint8 *, bcm_mpls_egress_label_t *);
#ifdef	INCLUDE_L3
extern uint8 *_bcm_pack_mpls_exp_map(uint8 *, bcm_mpls_exp_map_t *);
extern uint8 *_bcm_unpack_mpls_exp_map(uint8 *, bcm_mpls_exp_map_t *);
extern uint8 *_bcm_pack_mpls_info(uint8 *, bcm_mpls_info_t *);
extern uint8 *_bcm_unpack_mpls_info(uint8 *, bcm_mpls_info_t *);
extern uint8 *_bcm_pack_mpls_l3_initiator(uint8 *, bcm_mpls_l3_initiator_t *);
extern uint8 *_bcm_unpack_mpls_l3_initiator(uint8 *, bcm_mpls_l3_initiator_t *);
extern uint8 *_bcm_pack_mpls_port(uint8 *, bcm_mpls_port_t *);
extern uint8 *_bcm_unpack_mpls_port(uint8 *, bcm_mpls_port_t *);
extern uint8 *_bcm_pack_mpls_switch(uint8 *, bcm_mpls_switch_t *);
extern uint8 *_bcm_unpack_mpls_switch(uint8 *, bcm_mpls_switch_t *);
extern uint8 *_bcm_pack_mpls_tunnel_switch(uint8 *, bcm_mpls_tunnel_switch_t *);
extern uint8 *_bcm_unpack_mpls_tunnel_switch(uint8 *, bcm_mpls_tunnel_switch_t *);
extern uint8 *_bcm_pack_mpls_vpn_config(uint8 *, bcm_mpls_vpn_config_t *);
extern uint8 *_bcm_unpack_mpls_vpn_config(uint8 *, bcm_mpls_vpn_config_t *);
extern uint8 *_bcm_pack_mpls_vpn(uint8 *, bcm_mpls_vpn_t *);
extern uint8 *_bcm_unpack_mpls_vpn(uint8 *, bcm_mpls_vpn_t *);
extern uint8 *_bcm_pack_niv_forward(uint8 *, bcm_niv_forward_t *);
extern uint8 *_bcm_unpack_niv_forward(uint8 *, bcm_niv_forward_t *);
extern uint8 *_bcm_pack_niv_port(uint8 *, bcm_niv_port_t *);
extern uint8 *_bcm_unpack_niv_port(uint8 *, bcm_niv_port_t *);
#endif	/* INCLUDE_L3 */
extern uint8 *_bcm_pack_oam_delay(uint8 *, bcm_oam_delay_t *);
extern uint8 *_bcm_unpack_oam_delay(uint8 *, bcm_oam_delay_t *);
extern uint8 *_bcm_pack_oam_endpoint_info(uint8 *, bcm_oam_endpoint_info_t *);
extern uint8 *_bcm_unpack_oam_endpoint_info(uint8 *, bcm_oam_endpoint_info_t *);
extern uint8 *_bcm_pack_oam_group_info(uint8 *, bcm_oam_group_info_t *);
extern uint8 *_bcm_unpack_oam_group_info(uint8 *, bcm_oam_group_info_t *);
extern uint8 *_bcm_pack_oam_loss(uint8 *, bcm_oam_loss_t *);
extern uint8 *_bcm_unpack_oam_loss(uint8 *, bcm_oam_loss_t *);
extern uint8 *_bcm_pack_oam_psc(uint8 *, bcm_oam_psc_t *);
extern uint8 *_bcm_unpack_oam_psc(uint8 *, bcm_oam_psc_t *);
extern uint8 *_bcm_pack_pbmp(uint8 *, bcm_pbmp_t *);
extern uint8 *_bcm_unpack_pbmp(uint8 *, bcm_pbmp_t *);
extern uint8 *_bcm_pack_phy_config(uint8 *, bcm_phy_config_t *);
extern uint8 *_bcm_unpack_phy_config(uint8 *, bcm_phy_config_t *);
extern uint8 *_bcm_pack_policer_config(uint8 *, bcm_policer_config_t *);
extern uint8 *_bcm_unpack_policer_config(uint8 *, bcm_policer_config_t *);
extern uint8 *_bcm_pack_port_ability(uint8 *, bcm_port_ability_t *);
extern uint8 *_bcm_unpack_port_ability(uint8 *, bcm_port_ability_t *);
extern uint8 *_bcm_pack_port_cable_diag(uint8 *, bcm_port_cable_diag_t *);
extern uint8 *_bcm_unpack_port_cable_diag(uint8 *, bcm_port_cable_diag_t *);
extern uint8 *_bcm_pack_port_config(uint8 *, bcm_port_config_t *);
extern uint8 *_bcm_unpack_port_config(uint8 *, bcm_port_config_t *);
extern uint8 *_bcm_pack_port_congestion_config(uint8 *, bcm_port_congestion_config_t *);
extern uint8 *_bcm_unpack_port_congestion_config(uint8 *, bcm_port_congestion_config_t *);
extern uint8 *_bcm_pack_port_encap_config(uint8 *, bcm_port_encap_config_t *);
extern uint8 *_bcm_unpack_port_encap_config(uint8 *, bcm_port_encap_config_t *);
extern uint8 *_bcm_pack_port_info(uint8 *, bcm_port_info_t *);
extern uint8 *_bcm_unpack_port_info(uint8 *, bcm_port_info_t *);
extern uint8 *_bcm_pack_port_match_info(uint8 *, bcm_port_match_info_t *);
extern uint8 *_bcm_unpack_port_match_info(uint8 *, bcm_port_match_info_t *);
extern uint8 *_bcm_pack_port_timesync_config(uint8 *, bcm_port_timesync_config_t *);
extern uint8 *_bcm_unpack_port_timesync_config(uint8 *, bcm_port_timesync_config_t *);
extern uint8 *_bcm_pack_priority_mapping(uint8 *, bcm_priority_mapping_t *);
extern uint8 *_bcm_unpack_priority_mapping(uint8 *, bcm_priority_mapping_t *);
extern uint8 *_bcm_pack_qos_map(uint8 *, bcm_qos_map_t *);
extern uint8 *_bcm_unpack_qos_map(uint8 *, bcm_qos_map_t *);
extern uint8 *_bcm_pack_rate_limit(uint8 *, bcm_rate_limit_t *);
extern uint8 *_bcm_unpack_rate_limit(uint8 *, bcm_rate_limit_t *);
extern uint8 *_bcm_pack_rx_reasons(uint8 *, bcm_rx_reasons_t *);
extern uint8 *_bcm_unpack_rx_reasons(uint8 *, bcm_rx_reasons_t *);
extern uint8 *_bcm_pack_subport_config(uint8 *, bcm_subport_config_t *);
extern uint8 *_bcm_unpack_subport_config(uint8 *, bcm_subport_config_t *);
extern uint8 *_bcm_pack_subport_group_config(uint8 *, bcm_subport_group_config_t *);
extern uint8 *_bcm_unpack_subport_group_config(uint8 *, bcm_subport_group_config_t *);
extern uint8 *_bcm_pack_time_capture(uint8 *, bcm_time_capture_t *);
extern uint8 *_bcm_unpack_time_capture(uint8 *, bcm_time_capture_t *);
extern uint8 *_bcm_pack_time_interface(uint8 *, bcm_time_interface_t *);
extern uint8 *_bcm_unpack_time_interface(uint8 *, bcm_time_interface_t *);
#ifdef	INCLUDE_L3
extern uint8 *_bcm_pack_trill_port(uint8 *, bcm_trill_port_t *);
extern uint8 *_bcm_unpack_trill_port(uint8 *, bcm_trill_port_t *);
#endif	/* INCLUDE_L3 */
extern uint8 *_bcm_pack_trunk_add_info(uint8 *, bcm_trunk_add_info_t *);
extern uint8 *_bcm_unpack_trunk_add_info(uint8 *, bcm_trunk_add_info_t *);
extern uint8 *_bcm_pack_trunk_chip_info(uint8 *, bcm_trunk_chip_info_t *);
extern uint8 *_bcm_unpack_trunk_chip_info(uint8 *, bcm_trunk_chip_info_t *);
extern uint8 *_bcm_pack_trunk_member(uint8 *, bcm_trunk_member_t *);
extern uint8 *_bcm_unpack_trunk_member(uint8 *, bcm_trunk_member_t *);
#ifdef	INCLUDE_L3
extern uint8 *_bcm_pack_tunnel_config(uint8 *, bcm_tunnel_config_t *);
extern uint8 *_bcm_unpack_tunnel_config(uint8 *, bcm_tunnel_config_t *);
extern uint8 *_bcm_pack_tunnel_dscp_map(uint8 *, bcm_tunnel_dscp_map_t *);
extern uint8 *_bcm_unpack_tunnel_dscp_map(uint8 *, bcm_tunnel_dscp_map_t *);
extern uint8 *_bcm_pack_tunnel_initiator(uint8 *, bcm_tunnel_initiator_t *);
extern uint8 *_bcm_unpack_tunnel_initiator(uint8 *, bcm_tunnel_initiator_t *);
extern uint8 *_bcm_pack_tunnel_terminator(uint8 *, bcm_tunnel_terminator_t *);
extern uint8 *_bcm_unpack_tunnel_terminator(uint8 *, bcm_tunnel_terminator_t *);
#endif	/* INCLUDE_L3 */
extern uint8 *_bcm_pack_vlan_action_set(uint8 *, bcm_vlan_action_set_t *);
extern uint8 *_bcm_unpack_vlan_action_set(uint8 *, bcm_vlan_action_set_t *);
extern uint8 *_bcm_pack_vlan_block(uint8 *, bcm_vlan_block_t *);
extern uint8 *_bcm_unpack_vlan_block(uint8 *, bcm_vlan_block_t *);
extern uint8 *_bcm_pack_vlan_control_vlan(uint8 *, bcm_vlan_control_vlan_t *);
extern uint8 *_bcm_unpack_vlan_control_vlan(uint8 *, bcm_vlan_control_vlan_t *);
extern uint8 *_bcm_pack_vlan_ip(uint8 *, bcm_vlan_ip_t *);
extern uint8 *_bcm_unpack_vlan_ip(uint8 *, bcm_vlan_ip_t *);
extern uint8 *_bcm_pack_vlan_port(uint8 *, bcm_vlan_port_t *);
extern uint8 *_bcm_unpack_vlan_port(uint8 *, bcm_vlan_port_t *);
extern uint8 *_bcm_pack_vlan_vector(uint8 *, bcm_vlan_vector_t);
extern uint8 *_bcm_unpack_vlan_vector(uint8 *, bcm_vlan_vector_t);
#ifdef	INCLUDE_L3
extern uint8 *_bcm_pack_wlan_client(uint8 *, bcm_wlan_client_t *);
extern uint8 *_bcm_unpack_wlan_client(uint8 *, bcm_wlan_client_t *);
extern uint8 *_bcm_pack_wlan_port(uint8 *, bcm_wlan_port_t *);
extern uint8 *_bcm_unpack_wlan_port(uint8 *, bcm_wlan_port_t *);
#endif	/* INCLUDE_L3 */
extern uint8 *_bcm_pack_int_aBCM_COS_COUNT(uint8 *, int *);
extern uint8 *_bcm_unpack_int_aBCM_COS_COUNT(uint8 *, int *);
extern uint8 *_bcm_pack_int_aBCM_TRUNK_MAX_PORTCNT(uint8 *, int *);
extern uint8 *_bcm_unpack_int_aBCM_TRUNK_MAX_PORTCNT(uint8 *, int *);
extern uint8 *_bcm_pack_uint32_aBCM_CUSTOM_ARGS_MAX(uint8 *, uint32 *);
extern uint8 *_bcm_unpack_uint32_aBCM_CUSTOM_ARGS_MAX(uint8 *, uint32 *);
extern uint8 *_bcm_pack_uint64(uint8 *, uint64 *);
extern uint8 *_bcm_unpack_uint64(uint8 *, uint64 *);

#endif	/* BCM_RPC_SUPPORT */

#endif	/* !_BCM_INT_RPC_PACK_H */
